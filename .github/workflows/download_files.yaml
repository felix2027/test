name: Download Files from Config

on:
  workflow_dispatch:
  schedule:
    - cron: '0 0 * * *'

permissions:
  contents: write

jobs:
  download_files:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install PyYAML
        run: pip install pyyaml

      - name: Read config and download files
        run: python -c "$(cat <<EOF
import yaml
import os
import urllib.request

config_file = 'download_config.yaml'

with open(config_file, 'r') as f:
    config = yaml.safe_load(f)

files_to_download = []

if 'files' in config and isinstance(config['files'], list):
    print('Using individual file download configuration from "files" section.')
    files_config = config['files']
    for file_config in files_config:
        filename = file_config.get('filename')
        url = file_config.get('url')
        download_location = file_config.get('download_location')

        if filename and url and download_location:
            files_to_download.append({
                'filename': filename,
                'url': url,
                'download_location': download_location
            })
        else:
            print(f'Warning: Incomplete file configuration found in "files" section. Skipping: {file_config}')
else:
    print('No valid download configuration found in download_config.yaml. Please define "files" section.')
    exit(1)

if files_to_download:
    print(f'Found {len(files_to_download)} files to download:')
    for file_config in files_to_download:
        filename = file_config['filename']
        url = file_config['url']
        download_location = file_config['download_location']

        os.makedirs(download_location, exist_ok=True)
        download_path = os.path.join(download_location, filename)

        print(f'Downloading {filename} from {url} to {download_path}')
        try:
            headers = {'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36'}
            req = urllib.request.Request(url, headers=headers)
            with urllib.request.urlopen(req) as response:
                content = response.read()
                with open(download_path, 'wb') as f:
                    f.write(content)
            print(f'Downloaded {filename} successfully to {download_path}')
        except Exception as e:
            print(f'Error downloading {filename} from {url}: {e}')
else:
    print('No files to download based on the configuration.')
EOF
)"

      - name: Commit files
        run: |
          git config --local user.email "actions@github.com"
          git config --local user.name "GitHub Actions"
          git add --force .
          git commit -m "Daily update"
          git push
