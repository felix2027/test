name: Download Files from Config

on:
  workflow_dispatch:
  schedule:
    - cron: '0 0 * * *'

permissions:
  contents: write

jobs:
  download_files:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install PyYAML and requests
        run: |
          pip install pyyaml
          pip install requests

      - name: Read config and download files
        run: |
          python -c "
          import yaml
          import os
          import urllib.request
          import requests

          config_file = 'download_config.yaml'

          with open(config_file, 'r') as f:
              config = yaml.safe_load(f)

          files_to_download = []  # 用于存放最终的文件下载配置列表

          default_branch = config.get('branch')  # 从顶层配置中获取默认分支 (新增)

          # 处理单个文件下载配置 (files 列表)
          if 'files' in config and isinstance(config['files'], list):
              print('Using individual file download configuration from \"files\" section.')
              files_config = config['files']
              for file_config in files_config:
                  filename = file_config.get('filename')
                  url = file_config.get('url')
                  download_location = file_config.get('download_location')

                  if filename and url and download_location:
                      files_to_download.append({
                          'filename': filename,
                          'url': url,
                          'download_location': download_location
                      })
                  else:
                      print(f'Warning: Incomplete file configuration found in \"files\" section. Skipping: {file_config}')

          # 处理批量文件夹下载配置 (folders 列表)
          if 'folders' in config and isinstance(config['folders'], list):
              print('Using folder-based batch download configuration from \"folders\" section.')
              folders_config = config['folders']
              for folder_config in folders_config:
                  github_repo = folder_config.get('github_repo')
                  folder_path = folder_config.get('folder_path')
                  file_extension = folder_config.get('file_extension')
                  backup_location = folder_config.get('backup_location')
                  branch = folder_config.get('branch') or default_branch  # 如果没有指定分支，则使用默认分支

                  if github_repo and folder_path and file_extension and backup_location:
                      api_url = f'https://api.github.com/repos/{github_repo}/contents/{folder_path}?ref={branch}'  # GitHub API URL

                      try:
                          response = requests.get(api_url)
                          response.raise_for_status()
                          files_data = response.json()
                      except requests.exceptions.RequestException as e:
                          print(f'Error fetching file list from GitHub API for folder \"{folder_path}\" in repository \"{github_repo}\", branch \"{branch}\": {e}')
                          continue

                      # 递归下载文件夹中的内容
                      def download_files_recursive(api_url, backup_location):
                          try:
                              response = requests.get(api_url)
                              response.raise_for_status()
                              files_data = response.json()
                              
                              for file_info in files_data:
                                  if file_info['type'] == 'file' and file_info['name'].endswith(file_extension):
                                      filename = file_info['name']
                                      download_url = file_info['download_url']
                                      download_path = os.path.join(backup_location, filename)
                                      
                                      files_to_download.append({
                                          'filename': filename,
                                          'url': download_url,
                                          'download_location': backup_location
                                      })
                                  elif file_info['type'] == 'dir' and folder_config.get('recursive', False):
                                      download_files_recursive(file_info['url'], backup_location)  # 递归下载子文件夹中的文件

                          except requests.exceptions.RequestException as e:
                              print(f'Error fetching files recursively: {e}')

                      # 调用递归下载方法
                      download_files_recursive(api_url, backup_location)
                  else:
                      print(f'Warning: Incomplete folder configuration found in \"folders\" section. Skipping: {folder_config}')
          else:
              print('No valid download configuration found in download_config.yaml. Please define either \"files\" section or \"folders\" section.')
              exit(1)

          if files_to_download:
              print(f'Found {len(files_to_download)} files to download:')
              for file_config in files_to_download:
                  filename = file_config['filename']
                  url = file_config['url']
                  download_location = file_config['download_location']

                  os.makedirs(download_location, exist_ok=True)
                  download_path = os.path.join(download_location, filename)

                  print(f'Downloading {filename} from {url} to {download_path}')
                  try:
                      headers = {'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36'}
                      req = urllib.request.Request(url, headers=headers)
                      with urllib.request.urlopen(req) as response:
                          content = response.read()
                          with open(download_path, 'wb') as f:
                              f.write(content)
                      print(f'Downloaded {filename} successfully to {download_path}')
                  except Exception as e:
                      print(f'Error downloading {filename} from {url}: {e}')
          else:
              print('No files to download based on the configuration.')

          "

      - name: Commit files
        run: |
          git config --local user.email "actions@github.com"
          git config --local user.name "GitHub Actions"
          git add --force .
          git commit -m "Daily update"
          git push
